export XDG_CONFIG_HOME=$HOME/.config
VIM="nvim"

alias vim="nvim"

export CC="clang-12"
export CXX="clang++-12"
export PYTHONBREAKPOINT="pudb.set_trace"
export GOPATH=$HOME/go
export GIT_EDITOR=$VIM
export NF_IDFILE=$HOME/.idfile
export N_PREFIX="$HOME/.local/n"
export DOTFILES=$HOME/.dotfiles

catr() {
    tail -n "+$1" $3 | head -n "$(($2 - $1 + 1))"
}

validateYaml() {
    python -c 'import yaml,sys;yaml.safe_load(sys.stdin)' < $1
}

goWork() {
  git config --local core.sshCommand "ssh -F ~/.ssh/work_config"
  git config --local user.email "253415@skane.se"
}

goPersonal() {
  git config --global core.sshCommand "ssh -F ~/.ssh/personal_config"
  git config --global user.email "jacob.soderblom@protonmail.com"
}

goPersonalLocal() {
  git config --local core.sshCommand "ssh -F ~/.ssh/personal_config"
  git config --local user.email "jacob.soderblom@protonmail.com"
}

addThrottle() {
    local kbs="kbps"
    echo $kbs
    echo "About to throttle to $1 $kbs"
    echo "sudo tc qdisc add dev wlp59s0 handle 1: root htb default 11"
    echo "sudo tc class add dev wlp59s0 parent 1: classid 1:1 htb rate $1$kbs"
    echo "sudo tc class add dev wlp59s0 parent 1:1 classid 1:11 htb rate $1$kbs"
    sudo tc qdisc add dev wlp59s0 handle 1: root htb default 11
    sudo tc class add dev wlp59s0 parent 1: classid 1:1 htb rate $1$kbs
    sudo tc class add dev wlp59s0 parent 1:1 classid 1:11 htb rate $1$kbs
}

removeThrottle() {
    sudo tc qdisc del dev wlp59s0 root
}

cat1Line() {
    cat $1 | tr -d "\n"
}

ioloop() {
    FIFO=$(mktemp -u /tmp/ioloop_$$_XXXXXX ) &&
    trap "rm -f $FIFO" EXIT &&
    mkfifo $FIFO &&
    ( : <$FIFO & ) &&    # avoid deadlock on opening pipe
    exec >$FIFO <$FIFO
}

eslintify() {
    cat $1 > /tmp/file_to_eslint
    npx eslint
}

# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc